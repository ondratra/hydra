import { Service, Inject } from 'typedi';
import { Repository } from 'typeorm';
import { InjectRepository } from 'typeorm-typedi-extensions';
import { WhereInput } from '@joystream/warthog';
import { WarthogBaseService } from '../../WarthogBaseService';

import { {{className}} } from './{{kebabName}}.model';

import { {{#variantNames}} {{.}}, {{/variantNames}} } from '../variants/variants.model'

import {
  {{className}}WhereArgs,
  {{className}}WhereInput,
} from '{{{generatedFolderRelPath}}}';

{{#fieldResolverImports}}
  {{{.}}}
{{/fieldResolverImports}}

@Service('{{className}}Service')
export class {{className}}Service extends WarthogBaseService<{{className}}> {
 {{#fieldResolvers}}
    @Inject('{{returnTypeFunc}}Service') 
    public readonly {{fieldName}}Service!: {{returnTypeFunc}}Service
  {{/fieldResolvers}}
  
  constructor(
    @InjectRepository({{className}}) protected readonly repository: Repository<{{className}}>,
  ) {
    super({{className}}, repository);
  }


  async find<W extends WhereInput>(
		where?: any,
		orderBy?: string | string[],
		limit?: number,
		offset?: number,
		fields?: string[]
	): Promise<{{className}}[]> {
    {{#has.union}}
      let records = await this.findWithRelations<W>(where, orderBy, limit, offset, fields);
      if (records.length) {
        {{#fields}}
          {{#is.union}}
            {{#fieldVariantMap}}
            records = await {{type}}.fetchData{{field}}(records, '{{camelName}}')
            {{/fieldVariantMap}}
          {{/is.union}}
        {{/fields}}
      }
      return records;
    {{/has.union}}
    
    {{^has.union}} return this.findWithRelations<W>(where, orderBy, limit, offset, fields); {{/has.union}}
  }
  

  async findWithRelations<W extends WhereInput>(
		_where?: any,
		orderBy?: string | string[],
		limit?: number,
		offset?: number,
		fields?: string[]): Promise<{{className}}[]> {
    
    const where = <{{className}}WhereInput>(_where || {})

    {{#fieldResolvers}}
    // remove relation filters to enable warthog query builders 
    {{#relationType.isTO}}
        const { {{fieldName}} } = where 
        delete where.{{fieldName}};
    {{/relationType.isTO}}
    
    {{#relationType.isTM}}
        const { {{fieldName}}_some, {{fieldName}}_none, {{fieldName}}_every } = where 
        
        if ((+!!{{fieldName}}_some) + (+!!{{fieldName}}_none) + (+!!{{fieldName}}_every) > 1) {
            throw new Error(`A query can have at most one of none, some, every clauses on a relation field`)
        }

        delete where.{{fieldName}}_some;
        delete where.{{fieldName}}_none;
        delete where.{{fieldName}}_every;
    {{/relationType.isTM}}    
    {{/fieldResolvers}}

    let mainQuery = this.buildFindQueryWithParams(
      <any>where,
      orderBy,
      undefined,
      fields,
      'main'
    ).take(undefined); // remove LIMIT

    let parameters = mainQuery.getParameters();

    {{#crossFilters}}
    
    {{#fieldResolvers}}
        {{#relationType.isTO}}
        
        if ({{fieldName}}) {
          // OTO or MTO
          const {{fieldName}}Query = this.{{fieldName}}Service.buildFindQueryWithParams(
                <any>{{fieldName}},
                undefined,
                undefined,
                ['id'],
                '{{fieldName}}'
            ).take(undefined); // remove the default LIMIT 


          mainQuery = mainQuery
            .andWhere(`"{{typeormAliasName}}"."{{fieldNameColumnName}}_id" IN (${ {{fieldName}}Query.getQuery() })`);

          parameters = { ...parameters, ...{{fieldName}}Query.getParameters() };
          
        }
        {{/relationType.isTO}}

        {{#relationType.isTM}}
       
          const {{fieldName}}Filter = {{fieldName}}_some || {{fieldName}}_none || {{fieldName}}_every

          if ({{fieldName}}Filter) {

            const {{fieldName}}Query = this.{{fieldName}}Service.buildFindQueryWithParams(<any>{{fieldName}}Filter,
                undefined,
                undefined,
                ['id'],
                '{{fieldName}}'
            ).take(undefined); //remove the default LIMIT

            parameters = { ...parameters, ...{{fieldName}}Query.getParameters() }

            const subQueryFiltered = this
                .getQueryBuilder()
                .select([])
                .leftJoin(
                '{{typeormAliasName}}.{{fieldName}}',
                '{{fieldName}}_filtered',
                `{{fieldName}}_filtered.id IN (${ {{fieldName}}Query.getQuery() })`
                )
                .groupBy('{{typeormAliasName}}_id')
                .addSelect('count({{fieldName}}_filtered.id)', 'cnt_filtered')
                .addSelect('{{typeormAliasName}}.id', '{{typeormAliasName}}_id');

            const subQueryTotal = this
                .getQueryBuilder()
                .select([])
                .leftJoin('{{typeormAliasName}}.{{fieldName}}', '{{fieldName}}_total')
                .groupBy('{{typeormAliasName}}_id')
                .addSelect('count({{fieldName}}_total.id)', 'cnt_total')
                .addSelect('{{typeormAliasName}}.id', '{{typeormAliasName}}_id');

            const subQuery = `
                SELECT 
                    f.{{typeormAliasName}}_id {{typeormAliasName}}_id, f.cnt_filtered cnt_filtered, t.cnt_total cnt_total 
                FROM 
                    (${subQueryTotal.getQuery()}) t, (${subQueryFiltered.getQuery()}) f 
                WHERE 
                    t.{{typeormAliasName}}_id = f.{{typeormAliasName}}_id`;


            if ({{fieldName}}_none) {
              mainQuery = mainQuery.andWhere(`{{typeormAliasName}}.id IN 
                (SELECT 
                    {{fieldName}}_subq.{{typeormAliasName}}_id
                FROM 
                    (${subQuery}) {{fieldName}}_subq 
                WHERE 
                    {{fieldName}}_subq.cnt_filtered = 0
                )`)
            }

            if ({{fieldName}}_some) {
              mainQuery = mainQuery.andWhere(`{{typeormAliasName}}.id IN 
                (SELECT 
                    {{fieldName}}_subq.{{typeormAliasName}}_id
                FROM 
                    (${subQuery}) {{fieldName}}_subq 
                WHERE 
                    {{fieldName}}_subq.cnt_filtered > 0
                )`)
            }

            if ({{fieldName}}_every) {
              mainQuery = mainQuery.andWhere(`{{typeormAliasName}}.id IN 
                (SELECT 
                    {{fieldName}}_subq.{{typeormAliasName}}_id
                FROM 
                    (${subQuery}) {{fieldName}}_subq 
                WHERE 
                    {{fieldName}}_subq.cnt_filtered > 0 
                    AND {{fieldName}}_subq.cnt_filtered = {{fieldName}}_subq.cnt_total
                )`)
            }
          }
        {{/relationType.isTM}}

    {{/fieldResolvers}}
    
    {{/crossFilters}}

    mainQuery = mainQuery.setParameters(parameters);

    return mainQuery.take(limit || 50).skip(offset || 0).getMany();
  }
    

}
